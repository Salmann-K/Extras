/*
#include <stdio.h>

struct Process {
    int arrivalTime;
    int burstTime;
    int remainingTime;
    int turnaroundTime;
    int waitingTime;
    int completionTime;
};

int main() {
    int i, NOP, sum = 0, count = 0, y, quant, wt = 0, tat = 0, currentTime = 0;
    float avg_wt, avg_tat;

    printf("Total number of processes in the system: ");
    scanf("%d", &NOP);
    y = NOP;

    struct Process processes[NOP];

    for (i = 0; i < NOP; i++) {
        printf("\nEnter the Arrival and Burst time of Process[%d]\n", i + 1);
        printf("Arrival time is: ");
        scanf("%d", &processes[i].arrivalTime);
        printf("Burst time is: ");
        scanf("%d", &processes[i].burstTime);
        processes[i].remainingTime = processes[i].burstTime;
    }

    printf("Enter the Time Quantum for the processes: ");
    scanf("%d", &quant);

    printf("\nProcess No \tArrivalTime\tBurst Time \tCompletion Time \tTAT \t Waiting Time\n");

    for (sum = 0, i = 0; y != 0;) {
        if (processes[i].remainingTime <= quant && processes[i].remainingTime > 0 && processes[i].arrivalTime <= currentTime) {
            sum = sum + processes[i].remainingTime;
            processes[i].remainingTime = 0;
            count = 1;
        } else if (processes[i].remainingTime > 0 && processes[i].arrivalTime <= currentTime) {
            processes[i].remainingTime = processes[i].remainingTime - quant;
            sum = sum + quant;
        }

        if (processes[i].remainingTime == 0 && count == 1) {
            y--;
            processes[i].completionTime = sum;
            processes[i].turnaroundTime = processes[i].completionTime - processes[i].arrivalTime;
            processes[i].waitingTime = processes[i].turnaroundTime - processes[i].burstTime;
            printf("Process No[%d] \t %d\t\t%d\t\t\t %d\t\t %d\t %d\n", i + 1, processes[i].arrivalTime, processes[i].burstTime,
                   processes[i].completionTime, processes[i].turnaroundTime, processes[i].waitingTime);
            wt = wt + processes[i].waitingTime;
            tat = tat + processes[i].turnaroundTime;
            count = 0;
        }

        if (i == NOP - 1) {
            i = 0;
        } else if (processes[i + 1].arrivalTime <= sum) {
            i++;
        } else {
            i = 0;
        }

        currentTime = sum; // Update current time after each iteration
    }

    avg_wt = (float)wt / NOP;
    avg_tat = (float)tat / NOP;
    printf("\nAverage Turn Around Time: %.2f", avg_tat);
    printf("\nAverage Waiting Time: %.2f", avg_wt);
    return 0;
}
/*
4
0 8
1 5
2 10
3 11
6
*/

/*

#include <stdio.h>
void main() {
    int i, processes, sum = 0, cnt = 0, y, q, wt = 0, tat = 0, at[10], bt[10], temp[10];
    float avg_waitt, avg_turnat;
    printf("Total number of processes in the system: ");
    scanf("%d", &processes);
    y = processes;

    for (i = 0; i < processes; i++) {
        printf("\nEnter the Arrival and Burst time of the Process[%d]\n", i + 1);
        printf("Arrival time is: ");
        scanf("%d", &at[i]);
        printf("\nBurst time is: ");
        scanf("%d", &bt[i]);
        temp[i] = bt[i];
    }

    printf("Enter the Time Quantum for the process: ");
    scanf("%d", &q);

    printf("\nProcess No\tBurst Time\tTAT\tWaiting Time");

    for (sum = 0, i = 0; y != 0;) {
        if (temp[i] <= q && temp[i] > 0) {
            sum = sum + temp[i];
            temp[i] = 0;
            cnt = 1;
        } else if (temp[i] > 0) {
            temp[i] = temp[i] - q;
            sum = sum + q;
        }

        if (temp[i] == 0 && cnt == 1) {
            y--;
            printf("\nProcess No[%d]\t%d\t%d\t%d", i + 1, bt[i], sum - at[i], sum - at[i] - bt[i]);
            wt = wt + sum - at[i] - bt[i];
            tat = tat + sum - at[i];
            cnt = 0;
        }

        if (i == processes - 1) {
            i = 0;
        } else if (at[i + 1] <= sum) {
            i++;
        } else {
            i = 0;
        }
    }

    avg_waitt = wt * 1.0 / processes;
    avg_turnat = tat * 1.0 / processes;
    printf("\nAverage Turn Around Time: %f", avg_waitt);
    printf("\nAverage Waiting Time: %f", avg_turnat);
}

/*
5
4 8
3 6
8 4
5 4
6 8
2
*/
*/  
